// Explanation: JavaScript is Asynchronous but Defaults to Synchronous Behavior

// This comment clears a common confusion about JavaScript's behavior:
// - JavaScript is a single-threaded, non-blocking, asynchronous programming language.
// - However, its default behavior is **synchronous**, meaning it executes code line by line in the order it's written.
// - To make JavaScript behave asynchronously, we need to explicitly use mechanisms like `setTimeout`, `setInterval`, Promises, or async/await.

// Example 1: Default Synchronous Behavior
console.log('Step 1'); // This will execute first
console.log('Step 2'); // This will execute second
console.log('Step 3'); // This will execute third
// Output:
// Step 1
// Step 2
// Step 3

// Example 2: Asynchronous Behavior using `setTimeout`
console.log('Step 1'); // Executes first
setTimeout(() => {
    console.log('Step 2 (Delayed)'); // Executes after a delay, asynchronously
}, 1000);
console.log('Step 3'); // Executes before the delayed Step 2
// Output:
// Step 1
// Step 3
// Step 2 (Delayed)

// Why is `setTimeout` asynchronous?
// - The `setTimeout` function schedules a task to be executed after a specified delay.
// - While the main thread continues running other code, the task is queued in the event loop and executed later.

// Example 3: Asynchronous with Promises
console.log('Step 1');
const promise = new Promise((resolve) => {
    setTimeout(() => {
        resolve('Step 2 (Promise Resolved)');
    }, 1000);
});
promise.then((message) => console.log(message)); // Executes after 1 second
console.log('Step 3');
// Output:
// Step 1
// Step 3
// Step 2 (Promise Resolved)

// Key Takeaways:
// 1. By default, JavaScript executes synchronously.
// 2. Asynchronous behavior must be explicitly introduced using tools like `setTimeout`, `setInterval`, Promises, or async/await.
// 3. `setTimeout` and `setInterval` delay code execution without blocking the main thread.
// 4. Understanding the Event Loop and Call Stack is critical to mastering JavaScript's async behavior.


blocking vs non blocking code

// Blocking vs Non-Blocking Code in JavaScript

// Blocking Code:
// - Code that stops further execution of the program until the current task is complete.
// - This means other operations must wait, which can freeze the application or slow down performance.
// - Example: Synchronous code is generally blocking.

console.log('Step 1'); // Executes first
for (let i = 0; i < 1e9; i++) {} // Blocking operation: A time-consuming loop
console.log('Step 2'); // Executes only after the loop is complete
// Output:
// Step 1
// (Delay due to the loop)
// Step 2

// Why is this blocking?
// - The for loop is CPU-intensive and doesn't allow any other code to run until it finishes.

// Non-Blocking Code:
// - Code that allows the program to continue executing while waiting for a task to complete.
// - This improves performance and responsiveness, especially in I/O-heavy operations.
// - Example: Asynchronous code using callbacks, Promises, or async/await.

console.log('Step 1'); // Executes first
setTimeout(() => {
    console.log('Step 2 (Delayed)'); // Executes after 1 second (non-blocking)
}, 1000);
console.log('Step 3'); // Executes immediately after Step 1
// Output:
// Step 1
// Step 3
// Step 2 (Delayed)

// Why is this non-blocking?
// - The `setTimeout` function delegates the task to the event loop, allowing the program to continue running other code in the meantime.

// Key Differences:
// 1. **Execution Flow**:
//    - Blocking: Waits for the task to finish before moving to the next line.
//    - Non-Blocking: Moves to the next line immediately, delegating the task to be completed later.
// 2. **Impact on Performance**:
//    - Blocking: Slows down the application as other tasks cannot execute simultaneously.
//    - Non-Blocking: Increases efficiency by allowing multiple tasks to run concurrently.
// 3. **Examples**:
//    - Blocking: Synchronous file reads, loops, heavy computations.
//    - Non-Blocking: Asynchronous file reads, API calls, timers, event listeners.

// Example: Blocking File Read (Node.js)
const fs = require('fs');
const data = fs.readFileSync('example.txt', 'utf-8'); // Blocking operation
console.log(data); // Program waits until file is read
console.log('This runs after file is read');

// Example: Non-Blocking File Read (Node.js)
fs.readFile('example.txt', 'utf-8', (err, data) => {
    if (err) throw err;
    console.log(data); // Runs after file is read, but doesn't block other code
});
console.log('This runs immediately without waiting for file read');

// Summary:
// - Use non-blocking code (asynchronous) whenever possible to maintain responsiveness.
// - Blocking code is suitable for simple scripts but should be avoided in I/O-heavy or real-time applications.
